{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Official Python Library for the Quantel Finance API Website : quantel.io Documentation : quantel.io/docs Blog Posts : WIP Source Code : ratherbland/Quantel Get API Key : links.quantel.io/getstarted Overview \u00b6 Some features of Quantel: Fast : Data is retrieved through API endpoints instead of web scraping. Additionally, asynchronous requests can be utilized with simple configuration Simple : Data for multiple symbols can be retrieved with simple one-liners Lightweight : Minimal reliance on third party packages Powerful : 40+ years of historical financial data for almost 25k thousand companies across the globe Requirements \u00b6 Python 3.6+ Requests - The elegant and simple HTTP library for Python, built for human beings. Aiohttp - Asynchronous HTTP Client/Server for asyncio and Python. Installation \u00b6 pip install quantel Example \u00b6 from quantel import Quantel # Authenticate with the API qt = Quantel ( api_key = \"<quantel-api-key>\" ) # Instantiate the ticker class goog = qt . ticker ( 'goog' ) # Retrieve company profile goog . profile () Multiple Symbol Example \u00b6 The ticker class also makes it easy to retrieve data for a list of symbols with the same API. Simply pass a list of symbols as the argument to the ticker class. from quantel import Quantel qt = Quantel ( api_key = \"<quantel-api-key>\" ) symbols = [ 'fb' , 'aapl' , 'amzn' , 'nflx' , 'goog' ] faang = qt . ticker ( symbols ) faang . profile () International Example \u00b6 Quantel supports the majority of international exchanges. Read more about what data is supported by which exchanges at quantel.io/docs/ from quantel import Quantel qt = Quantel ( api_key = \"<quantel-api-key>\" ) symbols = [ 'DHER.DE' , 'CBA.AX' , 'DNB.OL' , 'NESN.SW' , 'ULVR.L' , 'SHOP.TO' , 'EDF.PA' , ' RELIANCE.NS' ] international = qt . ticker ( symbols ) international . balance_sheet () Asynchronous Example \u00b6 It really is that simple. Set asynchronous=True when instantiating the ticker class. from quantel import Quantel qt = Quantel ( api_key = \"<quantel-api-key>\" ) goog = qt . ticker ( 'goog' , asynchronous = True ) goog . profile () License \u00b6 This project is licensed under the terms of the MIT license. Questions can be raised directly via guy@quantel.io","title":"Home"},{"location":"#overview","text":"Some features of Quantel: Fast : Data is retrieved through API endpoints instead of web scraping. Additionally, asynchronous requests can be utilized with simple configuration Simple : Data for multiple symbols can be retrieved with simple one-liners Lightweight : Minimal reliance on third party packages Powerful : 40+ years of historical financial data for almost 25k thousand companies across the globe","title":"Overview"},{"location":"#requirements","text":"Python 3.6+ Requests - The elegant and simple HTTP library for Python, built for human beings. Aiohttp - Asynchronous HTTP Client/Server for asyncio and Python.","title":"Requirements"},{"location":"#installation","text":"pip install quantel","title":"Installation"},{"location":"#example","text":"from quantel import Quantel # Authenticate with the API qt = Quantel ( api_key = \"<quantel-api-key>\" ) # Instantiate the ticker class goog = qt . ticker ( 'goog' ) # Retrieve company profile goog . profile ()","title":"Example"},{"location":"#multiple-symbol-example","text":"The ticker class also makes it easy to retrieve data for a list of symbols with the same API. Simply pass a list of symbols as the argument to the ticker class. from quantel import Quantel qt = Quantel ( api_key = \"<quantel-api-key>\" ) symbols = [ 'fb' , 'aapl' , 'amzn' , 'nflx' , 'goog' ] faang = qt . ticker ( symbols ) faang . profile ()","title":"Multiple Symbol Example"},{"location":"#international-example","text":"Quantel supports the majority of international exchanges. Read more about what data is supported by which exchanges at quantel.io/docs/ from quantel import Quantel qt = Quantel ( api_key = \"<quantel-api-key>\" ) symbols = [ 'DHER.DE' , 'CBA.AX' , 'DNB.OL' , 'NESN.SW' , 'ULVR.L' , 'SHOP.TO' , 'EDF.PA' , ' RELIANCE.NS' ] international = qt . ticker ( symbols ) international . balance_sheet ()","title":"International Example"},{"location":"#asynchronous-example","text":"It really is that simple. Set asynchronous=True when instantiating the ticker class. from quantel import Quantel qt = Quantel ( api_key = \"<quantel-api-key>\" ) goog = qt . ticker ( 'goog' , asynchronous = True ) goog . profile ()","title":"Asynchronous Example"},{"location":"#license","text":"This project is licensed under the terms of the MIT license. Questions can be raised directly via guy@quantel.io","title":"License"},{"location":"guide/intro/","text":"Quickstart \u00b6 Import Quantel \u00b6 from quantel import Quantel Authenticate API \u00b6 Before we can pull information, we must instantiate the Quantel class and authenticate to the API qt = Quantel ( api_key = \"<quantel-api-key>\" ) Note Your API key will be validated during the Quantel class instantiation. Create Instance \u00b6 To retrieve data from Quantel for a single stock, create an instance of the ticker class by passing the company's ticker symbol as an argument: aapl = qt . ticker ( 'aapl' ) Or, pass in multiple symbols to retrieve data for multiple companies. Symbols can be passed in as a list: symbols = [ 'fb' , 'aapl' , 'amzn' , 'nflx' , 'goog' ] tickers = qt . ticker ( symbols ) Note Tickers parsed as uppercase or lowercase, it doesn't matter. They can also be passed in as a string: symbols = 'FB AAPL AMZN NFLX GOOG' tickers = qt . ticker ( symbols ) Note The Quantel API supports parsing multiple tickers (up to 30) to the same endpoint e.g. https://quantel-io.p.rapidapi.com/profile/FB,AAPL,AMZN,NFLX,GOOG . The Quantel Python library will handle this automatically. As such, the below code will only make one request to the API. For example: from quantel import Quantel qt = Quantel ( api_key = \"<quantel-api-key>\" ) symbols = 'fb aapl amzn nflx goog' tickers = qt . ticker ( symbols ) # Retrieve each company's profile information data = tickers . profile ()","title":"Quickstart"},{"location":"guide/intro/#quickstart","text":"","title":"Quickstart"},{"location":"guide/intro/#import-quantel","text":"from quantel import Quantel","title":"Import Quantel"},{"location":"guide/intro/#authenticate-api","text":"Before we can pull information, we must instantiate the Quantel class and authenticate to the API qt = Quantel ( api_key = \"<quantel-api-key>\" ) Note Your API key will be validated during the Quantel class instantiation.","title":"Authenticate API"},{"location":"guide/intro/#create-instance","text":"To retrieve data from Quantel for a single stock, create an instance of the ticker class by passing the company's ticker symbol as an argument: aapl = qt . ticker ( 'aapl' ) Or, pass in multiple symbols to retrieve data for multiple companies. Symbols can be passed in as a list: symbols = [ 'fb' , 'aapl' , 'amzn' , 'nflx' , 'goog' ] tickers = qt . ticker ( symbols ) Note Tickers parsed as uppercase or lowercase, it doesn't matter. They can also be passed in as a string: symbols = 'FB AAPL AMZN NFLX GOOG' tickers = qt . ticker ( symbols ) Note The Quantel API supports parsing multiple tickers (up to 30) to the same endpoint e.g. https://quantel-io.p.rapidapi.com/profile/FB,AAPL,AMZN,NFLX,GOOG . The Quantel Python library will handle this automatically. As such, the below code will only make one request to the API. For example: from quantel import Quantel qt = Quantel ( api_key = \"<quantel-api-key>\" ) symbols = 'fb aapl amzn nflx goog' tickers = qt . ticker ( symbols ) # Retrieve each company's profile information data = tickers . profile ()","title":"Create Instance"},{"location":"guide/ticker/financials/","text":"quote \u00b6 Details Description : Retrieves stock quote Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . quote () Data [{ 'avgVolume' : 1136007 , 'change' : - 8.14 , 'changesPercentage' : - 0.29 , 'dayHigh' : 2776.955 , 'dayLow' : 2747.0 , 'earningsAnnouncement' : None , 'eps' : 92.187 , 'exchange' : 'NASDAQ' , 'marketCap' : 1827191914496.0 , 'name' : 'Alphabet Inc.' , 'open' : 2765.66 , 'pe' : 29.871784 , 'previousClose' : 2761.93 , 'price' : 2753.79 , 'priceAvg200' : 2325.6572 , 'priceAvg50' : 2644.9353 , 'sharesOutstanding' : 663518974 , 'symbol' : 'GOOG' , 'timestamp' : 1628770344 , 'volume' : 760483 , 'yearHigh' : 2800.22 , 'yearLow' : 1406.55 }] ... balance_sheet \u00b6 Details Description : Retrieves all balance sheet statements Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . balance_sheet () Data [{ 'acceptedDate' : '2021-02-02 20:12:25' , 'accountPayables' : 5589000000 , 'accumulatedOtherComprehensiveIncomeLoss' : 633000000 , 'cashAndCashEquivalents' : 26465000000 , 'cashAndShortTermInvestments' : 136694000000 , 'commonStock' : 58510000000 , 'date' : '2020-12-31' , 'deferredRevenue' : 2543000000 , 'deferredRevenueNonCurrent' : 481000000 , 'deferredTaxLiabilitiesNonCurrent' : 3561000000 , 'fillingDate' : '2021-02-03' , 'goodwill' : 21175000000 , 'goodwillAndIntangibleAssets' : 22620000000 , 'intangibleAssets' : 1445000000 , 'inventory' : 728000000 , 'longTermDebt' : 13932000000 , 'longTermInvestments' : 20703000000 , 'netDebt' : 307000000 , 'netReceivables' : 31384000000 , 'otherAssets' : 0 , 'otherCurrentAssets' : 5490000000 , 'otherCurrentLiabilities' : 10409000000 , 'otherLiabilities' : 0 , 'otherNonCurrentAssets' : 3953000000 , 'otherNonCurrentLiabilities' : 2269000000 , 'othertotalStockholdersEquity' : 0 , 'period' : 'FY' , 'propertyPlantEquipmentNet' : 96960000000 , 'reportedCurrency' : 'USD' , 'retainedEarnings' : 163401000000 , 'shortTermDebt' : 0 , 'shortTermInvestments' : 110229000000 , 'symbol' : 'GOOG' , 'taxAssets' : 1084000000 , 'taxPayables' : 1485000000 , 'totalAssets' : 319616000000 , 'totalCurrentAssets' : 174296000000 , 'totalCurrentLiabilities' : 56834000000 , 'totalDebt' : 26772000000 , 'totalInvestments' : 130932000000 , 'totalLiabilities' : 97072000000 , 'totalLiabilitiesAndStockholdersEquity' : 319616000000 , 'totalNonCurrentAssets' : 145320000000 , 'totalNonCurrentLiabilities' : 40238000000 , 'totalStockholdersEquity' : 222544000000 }, ... balance_sheet_growth \u00b6 Details Description : Retrieves balance sheet growth by percentage data Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . balance_sheet_growth () Data [{ 'date' : '2020-12-31' , 'growthAccountPayables' : 0.005035065635677036 , 'growthAccumulatedOtherComprehensiveIncomeLoss' : - 1.5137987012987013 , 'growthCashAndCashEquivalents' : 0.43069521029300467 , 'growthCashAndShortTermInvestments' : 0.14221015249634428 , 'growthCommonStock' : 0.15742206045260326 , 'growthDeferredRevenue' : 0.3328092243186583 , 'growthDeferredRevenueNonCurrent' : 0.3435754189944134 , 'growthDeferrredTaxLiabilitiesNonCurrent' : 1.09347442680776 , 'growthGoodwill' : 0.02671644685802948 , 'growthGoodwillAndIntangibleAssets' : 0.000752112551431226 , 'growthIntangibleAssets' : - 0.269833249115715 , 'growthInventory' : - 0.27127127127127126 , 'growthLongTermDebt' : 2.059288537549407 , 'growthLongTermInvestments' : 0.5830402202171586 , 'growthNetDebt' : - 1.0220166379804934 , 'growthNetReceivables' : 0.14156845627819 , 'growthOtherAssets' : 0.0 , 'growthOtherCurrentAssets' : 0.2443336355394379 , 'growthOtherCurrentLiabilities' : - 0.48257692498881544 , 'growthOtherLiabilities' : 0.0 , 'growthOtherNonCurrentAssets' : 0.29056480574600063 , 'growthOtherNonCurrentLiabilities' : - 0.9013092079509373 , 'growthOthertotalStockholdersEquity' : - 1.0 , 'growthPropertyPlantEquipmentNet' : 0.1462754323950489 , 'growthRetainedEarnings' : 0.07414443670212066 , 'growthShortTermDebt' : 0.0 , 'growthShortTermInvestments' : 0.08946697371932356 , 'growthTaxAssets' : - 0.3627278071722516 , 'growthTaxPayables' : 4.41970802919708 , 'growthTotalAssets' : 0.1584109253413263 , 'growthTotalCurrentAssets' : 0.14234031118509877 , 'growthTotalCurrentLiabilities' : 0.25680546648680924 , 'growthTotalDebt' : 4.878787878787879 , 'growthTotalInvestments' : 0.14596297755021662 , 'growthTotalLiabilities' : 0.3035572804060859 , 'growthTotalLiabilitiesAndStockholdersEquity' : 0.1584109253413263 , 'growthTotalNonCurrentAssets' : 0.17829256229171903 , 'growthTotalNonCurrentLiabilities' : 0.3758462695753265 , 'growthTotalStockholdersEquity' : 0.10475471847976092 , 'period' : 'FY' , 'symbol' : 'GOOG' }, ... income_statement \u00b6 Details Description : Retrieves all income statements Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . income_statement () Data [{ 'acceptedDate' : '2021-02-02 20:12:25' , 'costAndExpenses' : 141303000000 , 'costOfRevenue' : 84732000000 , 'date' : '2020-12-31' , 'depreciationAndAmortization' : 13697000000 , 'ebitda' : 54921000000 , 'ebitdaratio' : 0.3008924707029645 , 'eps' : 58.14692108710071 , 'epsdiluted' : 58.14692108710071 , 'fillingDate' : '2021-02-03' , 'generalAndAdministrativeExpenses' : 11052000000 , 'grossProfit' : 97795000000 , 'grossProfitRatio' : 0.5357837470620785 , 'incomeBeforeTax' : 48082000000 , 'incomeBeforeTaxRatio' : 0.2634240413747007 , 'incomeTaxExpense' : 7813000000 , 'interestExpense' : 135000000 , 'netIncome' : 40269000000 , 'netIncomeRatio' : 0.22061941520980458 , 'operatingExpenses' : 56571000000 , 'operatingIncome' : 41224000000 , 'operatingIncomeRatio' : 0.22585151785763202 , 'otherExpenses' : 0 , 'period' : 'FY' , 'reportedCurrency' : 'USD' , 'researchAndDevelopmentExpenses' : 27573000000 , 'revenue' : 182527000000 , 'sellingAndMarketingExpenses' : 17946000000 , 'sellingGeneralAndAdministrativeExpenses' : 28998000000 , 'symbol' : 'GOOG' , 'totalOtherIncomeExpensesNet' : - 6858000000 , 'weightedAverageShsOut' : 675582000 , 'weightedAverageShsOutDil' : 680794590 }, ... income_statement_growth \u00b6 Details Description : Retrieves income statements growth by percentage data Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . income_statement_growth () Data [{ 'date' : '2020-12-31' , 'growthCostAndExpenses' : 0.10716468431197405 , 'growthCostOfRevenue' : 0.17853566262378992 , 'growthDepreciationAndAmortization' : 0.16263475087004498 , 'growthEBITDA' : 0.19362340259062852 , 'growthEBITDARatio' : 0.05845328676366234 , 'growthEPS' : 0.18274129580595216 , 'growthEPSDiluted' : 0.18274129580595216 , 'growthGeneralAndAdministrativeExpenses' : 0.1571563187100827 , 'growthGrossProfit' : 0.08708218005580196 , 'growthGrossProfitRatio' : - 0.03602283269164575 , 'growthIncomeBeforeTax' : 0.21342586750788645 , 'growthIncomeBeforeTaxRatio' : 0.07601325084630736 , 'growthIncomeTaxExpense' : 0.4791745550927679 , 'growthInterestExpense' : 0.35 , 'growthNetIncome' : 0.1725533587630667 , 'growthNetIncomeRatio' : 0.03976928886857504 , 'growthOperatingExpenses' : 0.04697129531952696 , 'growthOperatingIncome' : 0.20428851041453652 , 'growthOperatingIncomeRatio' : 0.06791064023495606 , 'growthOtherExpenses' : - 1.2309974045235448 , 'growthResearchAndDevelopmentExpenses' : 0.059766315627642404 , 'growthRevenue' : 0.12770532012826136 , 'growthSellingAndMarketingExpenses' : - 0.028054592720970536 , 'growthTotalOtherIncomeExpensesNet' : - 65.9113924050633 , 'growthWeightedAverageShsOut' : - 0.02448500727940423 , 'growthWeightedAverageShsOutDil' : - 0.01695822341614936 , 'period' : 'FY' , 'symbol' : 'GOOG' }, ... cash_flow \u00b6 Details Description : Retrieves all cash flow statements Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . cash_flow () Data [{ 'acceptedDate' : '2021-02-02 20:12:25' , 'accountsPayables' : 694000000 , 'accountsReceivables' : - 6524000000 , 'acquisitionsNet' : - 738000000 , 'capitalExpenditure' : - 22281000000 , 'cashAtBeginningOfPeriod' : 18498000000 , 'cashAtEndOfPeriod' : 26465000000 , 'changeInWorkingCapital' : 1827000000 , 'commonStockIssued' : 0 , 'commonStockRepurchased' : - 31149000000 , 'date' : '2020-12-31' , 'debtRepayment' : - 2100000000 , 'deferredIncomeTax' : 1390000000 , 'depreciationAndAmortization' : 13697000000 , 'dividendsPaid' : 0 , 'effectOfForexChangesOnCash' : 24000000 , 'fillingDate' : '2021-02-03' , 'freeCashFlow' : 42843000000 , 'inventory' : 0 , 'investmentsInPropertyPlantAndEquipment' : - 22281000000 , 'netCashProvidedByOperatingActivities' : 65124000000 , 'netCashUsedForInvestingActivites' : - 32773000000 , 'netCashUsedProvidedByFinancingActivities' : - 24408000000 , 'netChangeInCash' : 7967000000 , 'netIncome' : 40269000000 , 'operatingCashFlow' : 65124000000 , 'otherFinancingActivites' : 2800000000 , 'otherInvestingActivites' : 68000000 , 'otherNonCashItems' : 1267000000 , 'otherWorkingCapital' : 117462000000 , 'period' : 'FY' , 'purchasesOfInvestments' : - 143751000000 , 'reportedCurrency' : 'USD' , 'salesMaturitiesOfInvestments' : 133929000000 , 'stockBasedCompensation' : 12991000000 , 'symbol' : 'GOOG' }, ... ### cash_flow_growth Details Description : Retrieves cash flow statements growth by percentage data Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . cash_flow_growth () Data [{ 'date' : '2020-12-31' , 'growthAccountsPayables' : 0.6214953271028038 , 'growthAccountsReceivables' : 0.5032258064516129 , 'growthAcquisitionsNet' : - 0.7065606361829025 , 'growthCapitalExpenditure' : - 0.05380499405469679 , 'growthCashAtBeginningOfPeriod' : 0.10759834740434704 , 'growthCashAtEndOfPeriod' : 0.43069521029300467 , 'growthChangeInWorkingCapital' : 1.2307692307692308 , 'growthCommonStockIssued' : 0.0 , 'growthCommonStockRepurchased' : 0.6932485322896281 , 'growthDebtRepayment' : 2.58974358974359 , 'growthDeferredIncomeTax' : 7.034682080924855 , 'growthDepreciationAndAmortization' : 0.16263475087004498 , 'growthDividendsPaid' : 0.0 , 'growthEffectOfForexChangesOnCash' : - 2.0434782608695654 , 'growthFreeCashFlow' : 0.38328167376985667 , 'growthInventory' : 0.0 , 'growthInvestmentsInPropertyPlantAndEquipment' : - 0.05380499405469679 , 'growthNetCashProvidedByOperatingActivites' : 0.19449743213499635 , 'growthNetCashUsedForInvestingActivites' : 0.11128818961717134 , 'growthNetCashUsedProvidedByFinancingActivities' : 0.0516609935800767 , 'growthNetChangeInCash' : 3.433500278241514 , 'growthNetIncome' : 0.1725533587630667 , 'growthOperatingCashFlow' : 0.19449743213499635 , 'growthOtherFinancingActivites' : - 1.6622516556291391 , 'growthOtherInvestingActivites' : - 0.9964182249144061 , 'growthOtherNonCashItems' : - 0.8288762830902215 , 'growthOtherWorkingCapital' : 0.09412520841677767 , 'growthPurchasesOfInvestments' : 0.19154032973317972 , 'growthSalesMaturitiesOfInvestments' : 0.36342257965998165 , 'growthStockBasedCompensation' : 0.2035390031498981 , 'period' : 'FY' , 'symbol' : 'GOOG' }, ... ratios \u00b6 Details Description : Retrieves all key financial ratios Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . ratios () Data [{ 'assetTurnover' : 0.57108217360833 , 'capitalExpenditureCoverageRatio' : - 2.9228490642251246 , 'cashConversionCycle' : 41.81898753722751 , 'cashFlowCoverageRatios' : None , 'cashFlowToDebtRatio' : 4.674418604651163 , 'cashPerShare' : 202.33517174821117 , 'cashRatio' : 0.4656543618256677 , 'companyEquityMultiplier' : 1.4361923934143361 , 'currentRatio' : 3.0667558151810534 , 'date' : '2020-12-31' , 'daysOfInventoryOutstanding' : 3.136005287258651 , 'daysOfPayablesOutstanding' : 24.075732899022803 , 'daysOfSalesOutstanding' : 62.758715148991655 , 'debtEquityRatio' : 0.436192393414336 , 'debtRatio' : 0.3037144573488186 , 'dividendPaidAndCapexCoverageRatio' : None , 'dividendPayoutRatio' : None , 'dividendYield' : None , 'ebitPerRevenue' : 0.22585151785763202 , 'ebtPerEbit' : 1.1663594022899282 , 'effectiveTaxRate' : 0.16249324071378063 , 'enterpriseValueMultiple' : 22.353196298759674 , 'fixedAssetTurnover' : 1.8824979372937294 , 'freeCashFlowOperatingCashFlowRatio' : 0.6578680670720471 , 'freeCashFlowPerShare' : 63.41643205413999 , 'grossProfitMargin' : 0.5357837470620785 , 'interestCoverage' : 305.36296296296297 , 'inventoryTurnover' : 116.39010989010988 , 'longTermDebtToCapitalization' : 0.05891506960537222 , 'netIncomePerEBT' : 0.8375067592862194 , 'netProfitMargin' : 0.22061941520980458 , 'operatingCashFlowPerShare' : 96.3968844640621 , 'operatingCashFlowSalesRatio' : 0.35679105009121936 , 'operatingCycle' : 65.89472043625031 , 'operatingProfitMargin' : 0.22585151785763202 , 'payablesTurnover' : 15.160493827160494 , 'payoutRatio' : 0.0 , 'period' : 'FY' , 'pretaxProfitMargin' : 0.2634240413747007 , 'priceBookValueRatio' : 5.572798610271138 , 'priceCashFlowRatio' : 19.04356142012438 , 'priceEarningsRatio' : 30.797707763395664 , 'priceEarningsToGrowthRatio' : 1.6853173568441193 , 'priceFairValue' : 5.572798610271138 , 'priceSalesRatio' : 6.79457227656281 , 'priceToBookRatio' : 5.572798610271138 , 'priceToFreeCashFlowsRatio' : 28.94738682921784 , 'priceToOperatingCashFlowsRatio' : 19.04356142012438 , 'priceToSalesRatio' : 6.79457227656281 , 'quickRatio' : 2.9573494739064645 , 'receivablesTurnover' : 5.815925312261025 , 'returnOnAssets' : 0.12599181517821387 , 'returnOnCapitalEmployed' : 0.15687528065088172 , 'returnOnEquity' : 0.18094848659141563 , 'shortTermCoverageRatios' : None , 'symbol' : 'GOOG' , 'totalDebtToCapitalization' : None } ... key_metrics \u00b6 Details Description : Retrieves all key financial metrics Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . key_metrics () Data [{ 'averageInventory' : 863500000.0 , 'averagePayables' : 5575000000.0 , 'averageReceivables' : 29438000000.0 , 'bookValuePerShare' : 329.4107895118579 , 'capexPerShare' : - 32.98045240992211 , 'capexToDepreciation' : - 1.6267065780827918 , 'capexToOperatingCashFlow' : - 0.34213193292795285 , 'capexToRevenue' : - 0.12206961161910293 , 'cashPerShare' : 202.33517174821117 , 'currentRatio' : 3.0667558151810534 , 'date' : '2020-12-31' , 'daysOfInventoryOnHand' : 3.136005287258651 , 'daysPayablesOutstanding' : 24.075732899022803 , 'daysSalesOutstanding' : 62.758715148991655 , 'debtToAssets' : 0.3037144573488186 , 'debtToEquity' : 0.06260335034869509 , 'dividendYield' : None , 'earningsYield' : 0.03246994898719511 , 'enterpriseValue' : 1227659893924.18 , 'enterpriseValueOverEBITDA' : 22.353196298759674 , 'evToFreeCashFlow' : 28.654853626594306 , 'evToOperatingCashFlow' : 18.851113167560037 , 'evToSales' : 6.725908462442159 , 'freeCashFlowPerShare' : 63.41643205413999 , 'freeCashFlowYield' : 0.03454543257737714 , 'grahamNetNet' : 94.02855611902034 , 'grahamNumber' : 664.67073354722 , 'incomeQuality' : 1.617224167473739 , 'intangiblesToTotalAssets' : 0.07077242691229475 , 'interestCoverage' : 305.36296296296297 , 'interestDebtPerShare' : 20.822046768563993 , 'inventoryTurnover' : 116.39010989010988 , 'investedCapital' : 0.06260335034869509 , 'marketCap' : 1240192893924.18 , 'netCurrentAssetValue' : 77224000000.0 , 'netDebtToEBITDA' : - 0.2282005061816063 , 'netIncomePerShare' : 59.60638382905406 , 'operatingCashFlowPerShare' : 96.3968844640621 , 'payablesTurnover' : 15.160493827160494 , 'payoutRatio' : 0.0 , 'pbRatio' : 5.572798610271138 , 'peRatio' : 30.797707763395664 , 'period' : 'FY' , 'pfcfRatio' : 28.94738682921784 , 'pocfratio' : 19.04356142012438 , 'priceToSalesRatio' : 6.79457227656281 , 'ptbRatio' : 5.572798610271138 , 'receivablesTurnover' : 5.815925312261025 , 'researchAndDdevelopementToRevenue' : 0.15106258252203783 , 'returnOnTangibleAssets' : 0.135587684682622 , 'revenuePerShare' : 270.17741739714796 , 'roe' : 0.18094848659141563 , 'roic' : 0.15687528065088172 , 'salesGeneralAndAdministrativeToRevenue' : 0.060549946035381066 , 'shareholdersEquityPerShare' : 329.4107895118579 , 'stockBasedCompensationToRevenue' : 0.0711730319350014 , 'symbol' : 'GOOG' , 'tangibleAssetValue' : 199924000000.0 , 'tangibleBookValuePerShare' : 295.9285475338301 , 'workingCapital' : 117462000000.0 }, ...","title":"Financials"},{"location":"guide/ticker/financials/#quote","text":"Details Description : Retrieves stock quote Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . quote () Data [{ 'avgVolume' : 1136007 , 'change' : - 8.14 , 'changesPercentage' : - 0.29 , 'dayHigh' : 2776.955 , 'dayLow' : 2747.0 , 'earningsAnnouncement' : None , 'eps' : 92.187 , 'exchange' : 'NASDAQ' , 'marketCap' : 1827191914496.0 , 'name' : 'Alphabet Inc.' , 'open' : 2765.66 , 'pe' : 29.871784 , 'previousClose' : 2761.93 , 'price' : 2753.79 , 'priceAvg200' : 2325.6572 , 'priceAvg50' : 2644.9353 , 'sharesOutstanding' : 663518974 , 'symbol' : 'GOOG' , 'timestamp' : 1628770344 , 'volume' : 760483 , 'yearHigh' : 2800.22 , 'yearLow' : 1406.55 }] ...","title":"quote"},{"location":"guide/ticker/financials/#balance_sheet","text":"Details Description : Retrieves all balance sheet statements Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . balance_sheet () Data [{ 'acceptedDate' : '2021-02-02 20:12:25' , 'accountPayables' : 5589000000 , 'accumulatedOtherComprehensiveIncomeLoss' : 633000000 , 'cashAndCashEquivalents' : 26465000000 , 'cashAndShortTermInvestments' : 136694000000 , 'commonStock' : 58510000000 , 'date' : '2020-12-31' , 'deferredRevenue' : 2543000000 , 'deferredRevenueNonCurrent' : 481000000 , 'deferredTaxLiabilitiesNonCurrent' : 3561000000 , 'fillingDate' : '2021-02-03' , 'goodwill' : 21175000000 , 'goodwillAndIntangibleAssets' : 22620000000 , 'intangibleAssets' : 1445000000 , 'inventory' : 728000000 , 'longTermDebt' : 13932000000 , 'longTermInvestments' : 20703000000 , 'netDebt' : 307000000 , 'netReceivables' : 31384000000 , 'otherAssets' : 0 , 'otherCurrentAssets' : 5490000000 , 'otherCurrentLiabilities' : 10409000000 , 'otherLiabilities' : 0 , 'otherNonCurrentAssets' : 3953000000 , 'otherNonCurrentLiabilities' : 2269000000 , 'othertotalStockholdersEquity' : 0 , 'period' : 'FY' , 'propertyPlantEquipmentNet' : 96960000000 , 'reportedCurrency' : 'USD' , 'retainedEarnings' : 163401000000 , 'shortTermDebt' : 0 , 'shortTermInvestments' : 110229000000 , 'symbol' : 'GOOG' , 'taxAssets' : 1084000000 , 'taxPayables' : 1485000000 , 'totalAssets' : 319616000000 , 'totalCurrentAssets' : 174296000000 , 'totalCurrentLiabilities' : 56834000000 , 'totalDebt' : 26772000000 , 'totalInvestments' : 130932000000 , 'totalLiabilities' : 97072000000 , 'totalLiabilitiesAndStockholdersEquity' : 319616000000 , 'totalNonCurrentAssets' : 145320000000 , 'totalNonCurrentLiabilities' : 40238000000 , 'totalStockholdersEquity' : 222544000000 }, ...","title":"balance_sheet"},{"location":"guide/ticker/financials/#balance_sheet_growth","text":"Details Description : Retrieves balance sheet growth by percentage data Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . balance_sheet_growth () Data [{ 'date' : '2020-12-31' , 'growthAccountPayables' : 0.005035065635677036 , 'growthAccumulatedOtherComprehensiveIncomeLoss' : - 1.5137987012987013 , 'growthCashAndCashEquivalents' : 0.43069521029300467 , 'growthCashAndShortTermInvestments' : 0.14221015249634428 , 'growthCommonStock' : 0.15742206045260326 , 'growthDeferredRevenue' : 0.3328092243186583 , 'growthDeferredRevenueNonCurrent' : 0.3435754189944134 , 'growthDeferrredTaxLiabilitiesNonCurrent' : 1.09347442680776 , 'growthGoodwill' : 0.02671644685802948 , 'growthGoodwillAndIntangibleAssets' : 0.000752112551431226 , 'growthIntangibleAssets' : - 0.269833249115715 , 'growthInventory' : - 0.27127127127127126 , 'growthLongTermDebt' : 2.059288537549407 , 'growthLongTermInvestments' : 0.5830402202171586 , 'growthNetDebt' : - 1.0220166379804934 , 'growthNetReceivables' : 0.14156845627819 , 'growthOtherAssets' : 0.0 , 'growthOtherCurrentAssets' : 0.2443336355394379 , 'growthOtherCurrentLiabilities' : - 0.48257692498881544 , 'growthOtherLiabilities' : 0.0 , 'growthOtherNonCurrentAssets' : 0.29056480574600063 , 'growthOtherNonCurrentLiabilities' : - 0.9013092079509373 , 'growthOthertotalStockholdersEquity' : - 1.0 , 'growthPropertyPlantEquipmentNet' : 0.1462754323950489 , 'growthRetainedEarnings' : 0.07414443670212066 , 'growthShortTermDebt' : 0.0 , 'growthShortTermInvestments' : 0.08946697371932356 , 'growthTaxAssets' : - 0.3627278071722516 , 'growthTaxPayables' : 4.41970802919708 , 'growthTotalAssets' : 0.1584109253413263 , 'growthTotalCurrentAssets' : 0.14234031118509877 , 'growthTotalCurrentLiabilities' : 0.25680546648680924 , 'growthTotalDebt' : 4.878787878787879 , 'growthTotalInvestments' : 0.14596297755021662 , 'growthTotalLiabilities' : 0.3035572804060859 , 'growthTotalLiabilitiesAndStockholdersEquity' : 0.1584109253413263 , 'growthTotalNonCurrentAssets' : 0.17829256229171903 , 'growthTotalNonCurrentLiabilities' : 0.3758462695753265 , 'growthTotalStockholdersEquity' : 0.10475471847976092 , 'period' : 'FY' , 'symbol' : 'GOOG' }, ...","title":"balance_sheet_growth"},{"location":"guide/ticker/financials/#income_statement","text":"Details Description : Retrieves all income statements Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . income_statement () Data [{ 'acceptedDate' : '2021-02-02 20:12:25' , 'costAndExpenses' : 141303000000 , 'costOfRevenue' : 84732000000 , 'date' : '2020-12-31' , 'depreciationAndAmortization' : 13697000000 , 'ebitda' : 54921000000 , 'ebitdaratio' : 0.3008924707029645 , 'eps' : 58.14692108710071 , 'epsdiluted' : 58.14692108710071 , 'fillingDate' : '2021-02-03' , 'generalAndAdministrativeExpenses' : 11052000000 , 'grossProfit' : 97795000000 , 'grossProfitRatio' : 0.5357837470620785 , 'incomeBeforeTax' : 48082000000 , 'incomeBeforeTaxRatio' : 0.2634240413747007 , 'incomeTaxExpense' : 7813000000 , 'interestExpense' : 135000000 , 'netIncome' : 40269000000 , 'netIncomeRatio' : 0.22061941520980458 , 'operatingExpenses' : 56571000000 , 'operatingIncome' : 41224000000 , 'operatingIncomeRatio' : 0.22585151785763202 , 'otherExpenses' : 0 , 'period' : 'FY' , 'reportedCurrency' : 'USD' , 'researchAndDevelopmentExpenses' : 27573000000 , 'revenue' : 182527000000 , 'sellingAndMarketingExpenses' : 17946000000 , 'sellingGeneralAndAdministrativeExpenses' : 28998000000 , 'symbol' : 'GOOG' , 'totalOtherIncomeExpensesNet' : - 6858000000 , 'weightedAverageShsOut' : 675582000 , 'weightedAverageShsOutDil' : 680794590 }, ...","title":"income_statement"},{"location":"guide/ticker/financials/#income_statement_growth","text":"Details Description : Retrieves income statements growth by percentage data Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . income_statement_growth () Data [{ 'date' : '2020-12-31' , 'growthCostAndExpenses' : 0.10716468431197405 , 'growthCostOfRevenue' : 0.17853566262378992 , 'growthDepreciationAndAmortization' : 0.16263475087004498 , 'growthEBITDA' : 0.19362340259062852 , 'growthEBITDARatio' : 0.05845328676366234 , 'growthEPS' : 0.18274129580595216 , 'growthEPSDiluted' : 0.18274129580595216 , 'growthGeneralAndAdministrativeExpenses' : 0.1571563187100827 , 'growthGrossProfit' : 0.08708218005580196 , 'growthGrossProfitRatio' : - 0.03602283269164575 , 'growthIncomeBeforeTax' : 0.21342586750788645 , 'growthIncomeBeforeTaxRatio' : 0.07601325084630736 , 'growthIncomeTaxExpense' : 0.4791745550927679 , 'growthInterestExpense' : 0.35 , 'growthNetIncome' : 0.1725533587630667 , 'growthNetIncomeRatio' : 0.03976928886857504 , 'growthOperatingExpenses' : 0.04697129531952696 , 'growthOperatingIncome' : 0.20428851041453652 , 'growthOperatingIncomeRatio' : 0.06791064023495606 , 'growthOtherExpenses' : - 1.2309974045235448 , 'growthResearchAndDevelopmentExpenses' : 0.059766315627642404 , 'growthRevenue' : 0.12770532012826136 , 'growthSellingAndMarketingExpenses' : - 0.028054592720970536 , 'growthTotalOtherIncomeExpensesNet' : - 65.9113924050633 , 'growthWeightedAverageShsOut' : - 0.02448500727940423 , 'growthWeightedAverageShsOutDil' : - 0.01695822341614936 , 'period' : 'FY' , 'symbol' : 'GOOG' }, ...","title":"income_statement_growth"},{"location":"guide/ticker/financials/#cash_flow","text":"Details Description : Retrieves all cash flow statements Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . cash_flow () Data [{ 'acceptedDate' : '2021-02-02 20:12:25' , 'accountsPayables' : 694000000 , 'accountsReceivables' : - 6524000000 , 'acquisitionsNet' : - 738000000 , 'capitalExpenditure' : - 22281000000 , 'cashAtBeginningOfPeriod' : 18498000000 , 'cashAtEndOfPeriod' : 26465000000 , 'changeInWorkingCapital' : 1827000000 , 'commonStockIssued' : 0 , 'commonStockRepurchased' : - 31149000000 , 'date' : '2020-12-31' , 'debtRepayment' : - 2100000000 , 'deferredIncomeTax' : 1390000000 , 'depreciationAndAmortization' : 13697000000 , 'dividendsPaid' : 0 , 'effectOfForexChangesOnCash' : 24000000 , 'fillingDate' : '2021-02-03' , 'freeCashFlow' : 42843000000 , 'inventory' : 0 , 'investmentsInPropertyPlantAndEquipment' : - 22281000000 , 'netCashProvidedByOperatingActivities' : 65124000000 , 'netCashUsedForInvestingActivites' : - 32773000000 , 'netCashUsedProvidedByFinancingActivities' : - 24408000000 , 'netChangeInCash' : 7967000000 , 'netIncome' : 40269000000 , 'operatingCashFlow' : 65124000000 , 'otherFinancingActivites' : 2800000000 , 'otherInvestingActivites' : 68000000 , 'otherNonCashItems' : 1267000000 , 'otherWorkingCapital' : 117462000000 , 'period' : 'FY' , 'purchasesOfInvestments' : - 143751000000 , 'reportedCurrency' : 'USD' , 'salesMaturitiesOfInvestments' : 133929000000 , 'stockBasedCompensation' : 12991000000 , 'symbol' : 'GOOG' }, ... ### cash_flow_growth Details Description : Retrieves cash flow statements growth by percentage data Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . cash_flow_growth () Data [{ 'date' : '2020-12-31' , 'growthAccountsPayables' : 0.6214953271028038 , 'growthAccountsReceivables' : 0.5032258064516129 , 'growthAcquisitionsNet' : - 0.7065606361829025 , 'growthCapitalExpenditure' : - 0.05380499405469679 , 'growthCashAtBeginningOfPeriod' : 0.10759834740434704 , 'growthCashAtEndOfPeriod' : 0.43069521029300467 , 'growthChangeInWorkingCapital' : 1.2307692307692308 , 'growthCommonStockIssued' : 0.0 , 'growthCommonStockRepurchased' : 0.6932485322896281 , 'growthDebtRepayment' : 2.58974358974359 , 'growthDeferredIncomeTax' : 7.034682080924855 , 'growthDepreciationAndAmortization' : 0.16263475087004498 , 'growthDividendsPaid' : 0.0 , 'growthEffectOfForexChangesOnCash' : - 2.0434782608695654 , 'growthFreeCashFlow' : 0.38328167376985667 , 'growthInventory' : 0.0 , 'growthInvestmentsInPropertyPlantAndEquipment' : - 0.05380499405469679 , 'growthNetCashProvidedByOperatingActivites' : 0.19449743213499635 , 'growthNetCashUsedForInvestingActivites' : 0.11128818961717134 , 'growthNetCashUsedProvidedByFinancingActivities' : 0.0516609935800767 , 'growthNetChangeInCash' : 3.433500278241514 , 'growthNetIncome' : 0.1725533587630667 , 'growthOperatingCashFlow' : 0.19449743213499635 , 'growthOtherFinancingActivites' : - 1.6622516556291391 , 'growthOtherInvestingActivites' : - 0.9964182249144061 , 'growthOtherNonCashItems' : - 0.8288762830902215 , 'growthOtherWorkingCapital' : 0.09412520841677767 , 'growthPurchasesOfInvestments' : 0.19154032973317972 , 'growthSalesMaturitiesOfInvestments' : 0.36342257965998165 , 'growthStockBasedCompensation' : 0.2035390031498981 , 'period' : 'FY' , 'symbol' : 'GOOG' }, ...","title":"cash_flow"},{"location":"guide/ticker/financials/#ratios","text":"Details Description : Retrieves all key financial ratios Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . ratios () Data [{ 'assetTurnover' : 0.57108217360833 , 'capitalExpenditureCoverageRatio' : - 2.9228490642251246 , 'cashConversionCycle' : 41.81898753722751 , 'cashFlowCoverageRatios' : None , 'cashFlowToDebtRatio' : 4.674418604651163 , 'cashPerShare' : 202.33517174821117 , 'cashRatio' : 0.4656543618256677 , 'companyEquityMultiplier' : 1.4361923934143361 , 'currentRatio' : 3.0667558151810534 , 'date' : '2020-12-31' , 'daysOfInventoryOutstanding' : 3.136005287258651 , 'daysOfPayablesOutstanding' : 24.075732899022803 , 'daysOfSalesOutstanding' : 62.758715148991655 , 'debtEquityRatio' : 0.436192393414336 , 'debtRatio' : 0.3037144573488186 , 'dividendPaidAndCapexCoverageRatio' : None , 'dividendPayoutRatio' : None , 'dividendYield' : None , 'ebitPerRevenue' : 0.22585151785763202 , 'ebtPerEbit' : 1.1663594022899282 , 'effectiveTaxRate' : 0.16249324071378063 , 'enterpriseValueMultiple' : 22.353196298759674 , 'fixedAssetTurnover' : 1.8824979372937294 , 'freeCashFlowOperatingCashFlowRatio' : 0.6578680670720471 , 'freeCashFlowPerShare' : 63.41643205413999 , 'grossProfitMargin' : 0.5357837470620785 , 'interestCoverage' : 305.36296296296297 , 'inventoryTurnover' : 116.39010989010988 , 'longTermDebtToCapitalization' : 0.05891506960537222 , 'netIncomePerEBT' : 0.8375067592862194 , 'netProfitMargin' : 0.22061941520980458 , 'operatingCashFlowPerShare' : 96.3968844640621 , 'operatingCashFlowSalesRatio' : 0.35679105009121936 , 'operatingCycle' : 65.89472043625031 , 'operatingProfitMargin' : 0.22585151785763202 , 'payablesTurnover' : 15.160493827160494 , 'payoutRatio' : 0.0 , 'period' : 'FY' , 'pretaxProfitMargin' : 0.2634240413747007 , 'priceBookValueRatio' : 5.572798610271138 , 'priceCashFlowRatio' : 19.04356142012438 , 'priceEarningsRatio' : 30.797707763395664 , 'priceEarningsToGrowthRatio' : 1.6853173568441193 , 'priceFairValue' : 5.572798610271138 , 'priceSalesRatio' : 6.79457227656281 , 'priceToBookRatio' : 5.572798610271138 , 'priceToFreeCashFlowsRatio' : 28.94738682921784 , 'priceToOperatingCashFlowsRatio' : 19.04356142012438 , 'priceToSalesRatio' : 6.79457227656281 , 'quickRatio' : 2.9573494739064645 , 'receivablesTurnover' : 5.815925312261025 , 'returnOnAssets' : 0.12599181517821387 , 'returnOnCapitalEmployed' : 0.15687528065088172 , 'returnOnEquity' : 0.18094848659141563 , 'shortTermCoverageRatios' : None , 'symbol' : 'GOOG' , 'totalDebtToCapitalization' : None } ...","title":"ratios"},{"location":"guide/ticker/financials/#key_metrics","text":"Details Description : Retrieves all key financial metrics Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . key_metrics () Data [{ 'averageInventory' : 863500000.0 , 'averagePayables' : 5575000000.0 , 'averageReceivables' : 29438000000.0 , 'bookValuePerShare' : 329.4107895118579 , 'capexPerShare' : - 32.98045240992211 , 'capexToDepreciation' : - 1.6267065780827918 , 'capexToOperatingCashFlow' : - 0.34213193292795285 , 'capexToRevenue' : - 0.12206961161910293 , 'cashPerShare' : 202.33517174821117 , 'currentRatio' : 3.0667558151810534 , 'date' : '2020-12-31' , 'daysOfInventoryOnHand' : 3.136005287258651 , 'daysPayablesOutstanding' : 24.075732899022803 , 'daysSalesOutstanding' : 62.758715148991655 , 'debtToAssets' : 0.3037144573488186 , 'debtToEquity' : 0.06260335034869509 , 'dividendYield' : None , 'earningsYield' : 0.03246994898719511 , 'enterpriseValue' : 1227659893924.18 , 'enterpriseValueOverEBITDA' : 22.353196298759674 , 'evToFreeCashFlow' : 28.654853626594306 , 'evToOperatingCashFlow' : 18.851113167560037 , 'evToSales' : 6.725908462442159 , 'freeCashFlowPerShare' : 63.41643205413999 , 'freeCashFlowYield' : 0.03454543257737714 , 'grahamNetNet' : 94.02855611902034 , 'grahamNumber' : 664.67073354722 , 'incomeQuality' : 1.617224167473739 , 'intangiblesToTotalAssets' : 0.07077242691229475 , 'interestCoverage' : 305.36296296296297 , 'interestDebtPerShare' : 20.822046768563993 , 'inventoryTurnover' : 116.39010989010988 , 'investedCapital' : 0.06260335034869509 , 'marketCap' : 1240192893924.18 , 'netCurrentAssetValue' : 77224000000.0 , 'netDebtToEBITDA' : - 0.2282005061816063 , 'netIncomePerShare' : 59.60638382905406 , 'operatingCashFlowPerShare' : 96.3968844640621 , 'payablesTurnover' : 15.160493827160494 , 'payoutRatio' : 0.0 , 'pbRatio' : 5.572798610271138 , 'peRatio' : 30.797707763395664 , 'period' : 'FY' , 'pfcfRatio' : 28.94738682921784 , 'pocfratio' : 19.04356142012438 , 'priceToSalesRatio' : 6.79457227656281 , 'ptbRatio' : 5.572798610271138 , 'receivablesTurnover' : 5.815925312261025 , 'researchAndDdevelopementToRevenue' : 0.15106258252203783 , 'returnOnTangibleAssets' : 0.135587684682622 , 'revenuePerShare' : 270.17741739714796 , 'roe' : 0.18094848659141563 , 'roic' : 0.15687528065088172 , 'salesGeneralAndAdministrativeToRevenue' : 0.060549946035381066 , 'shareholdersEquityPerShare' : 329.4107895118579 , 'stockBasedCompensationToRevenue' : 0.0711730319350014 , 'symbol' : 'GOOG' , 'tangibleAssetValue' : 199924000000.0 , 'tangibleBookValuePerShare' : 295.9285475338301 , 'workingCapital' : 117462000000.0 }, ...","title":"key_metrics"},{"location":"guide/ticker/insights/","text":"profile \u00b6 Details Description : Retrieves company profile Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . profile () Data [{ 'address' : '1600 Amphitheatre Parkway' , 'beta' : 1.017391 , 'ceo' : 'Mr. Sundar Pichai' , 'changes' : - 8.14 , 'cik' : '0001652044' , 'city' : 'Mountain View' , 'companyName' : 'Alphabet Inc.' , 'country' : 'US' , 'currency' : 'USD' , 'cusip' : '02079K107' , 'dcf' : 2773.8 , 'dcfDiff' : 376.88 , 'defaultImage' : False , 'description' : 'Alphabet Inc. provides online advertising services in the ' 'United States, Europe, the Middle East, Africa, the ' 'Asia-Pacific, Canada, and Latin America. It offers ' 'performance and brand advertising services. The company ' 'operates through Google and Other Bets segments. The Google ' 'segment offers products, such as Ads, Android, Chrome, Google ' 'Cloud, Google Maps, Google Play, Hardware, Search, and ' 'YouTube, as well as technical infrastructure. It also offers ' 'digital content, cloud services, hardware devices, and other ' 'miscellaneous products and services. The Other Bets segment ' 'includes businesses, including Access, Calico, CapitalG, GV, ' 'Verily, Waymo, and X, as well as Internet and television ' 'services. The company has an agreement with Sabre Corporation ' 'to develop an artificial intelligence-driven technology ' 'platform for travel. Alphabet Inc. was founded in 1998 and is ' 'headquartered in Mountain View, California.' , 'exchange' : 'Nasdaq Global Select' , 'exchangeShortName' : 'NASDAQ' , 'fullTimeEmployees' : 139995 , 'industry' : 'Internet Content & Information' , 'ipoDate' : '2004-08-19' , 'isActivelyTrading' : True , 'isEtf' : False , 'isin' : 'US02079K1079' , 'lastDiv' : 0.0 , 'mktCap' : 1827191914496.0 , 'phone' : '650-253-0000' , 'price' : 2753.79 , 'range' : '1406.55-2800.22' , 'sector' : 'Communication Services' , 'state' : 'CA' , 'symbol' : 'GOOG' , 'volAvg' : 1136007 , 'website' : 'http://www.abc.xyz' , 'zip' : '94043' }] analyst_estimates \u00b6 Details Description : Retrieves analyst estimates for key financial metrics Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . analyst_estimates () Data [{ 'date' : '2021-12-31' , 'estimatedEbitAvg' : 39863199675 , 'estimatedEbitHigh' : 40836481702 , 'estimatedEbitLow' : 39437150662 , 'estimatedEbitdaAvg' : 59980542854 , 'estimatedEbitdaHigh' : 61445000921 , 'estimatedEbitdaLow' : 59339484152 , 'estimatedEpsAvg' : 63.9336 , 'estimatedEpsHigh' : 75.705 , 'estimatedEpsLow' : 52.9788 , 'estimatedNetIncomeAvg' : 39993627601 , 'estimatedNetIncomeHigh' : 40970094098 , 'estimatedNetIncomeLow' : 39566184604 , 'estimatedRevenueAvg' : 224762614999 , 'estimatedRevenueHigh' : 234949860000 , 'estimatedRevenueLow' : 206864140000 , 'estimatedSgaExpenseAvg' : 32624449735 , 'estimatedSgaExpenseHigh' : 33420993686 , 'estimatedSgaExpenseLow' : 32275766872 , 'numberAnalystEstimatedRevenue' : 35 , 'numberAnalystsEstimatedEps' : 40 , 'symbol' : 'GOOG' }, ... insider_transactions \u00b6 Details Description : Retrieves details of insider buying/selling Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . insider_transactions () from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) # Only returns the last 6 months of insider transactions goog . insider_transactions ( months = 6 ) Data [{ 'currency' : 'USD' , 'date' : '2021-08-11' , 'orderType' : 'Sell' , 'reportedName' : 'Sergey Brin' , 'sharePrice' : 2749.28 , 'shareVolume' : 27739 , 'symbol' : 'GOOG' , 'transactionValue' : 76262884 }, { 'currency' : 'USD' , 'date' : '2021-08-10' , 'orderType' : 'Sell' , 'reportedName' : 'Sergey Brin' , 'sharePrice' : 2748.97 , 'shareVolume' : 27787 , 'symbol' : 'GOOG' , 'transactionValue' : 76384923 }, { 'currency' : 'USD' , 'date' : '2021-08-09' , 'orderType' : 'Sell' , 'reportedName' : 'L. John Hennessy' , 'sharePrice' : 2741.42 , 'shareVolume' : 199 , 'symbol' : 'GOOG' , 'transactionValue' : 546239 }, { 'currency' : 'USD' , 'date' : '2021-08-09' , 'orderType' : 'Sell' , 'reportedName' : 'Sergey Brin' , 'sharePrice' : 2736.64 , 'shareVolume' : 27777 , 'symbol' : 'GOOG' , 'transactionValue' : 76016535 }, { 'currency' : 'USD' , 'date' : '2021-08-04' , 'orderType' : 'Sell' , 'reportedName' : 'Sundar Pichai' , 'sharePrice' : 2718.18 , 'shareVolume' : 3000 , 'symbol' : 'GOOG' , 'transactionValue' : 8153625 }, ... insider_transactions_summarized \u00b6 Details Description : Retrieves details of summarized insider buying/selling Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . insider_transactions_summarized () from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) # Only summarizes the last 6 months of insider transactions goog . insider_transactions_summarized ( months = 6 ) Data [{ 'buyOrders' : 0 , 'buyValue' : 0 , 'buyVolume' : 0 , 'currency' : 'USD' , 'sellOrders' : 117 , 'sellValue' : 1815554556 , 'sellVolume' : 817229 , 'symbol' : 'GOOG' }] share_ownership \u00b6 Details Description : Retrieves details of various shareholding groups Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . share_ownership () Data [{ 'employeeShareScheme' : 0 , 'firmsVCPE' : 0 , 'generalPublic' : 125002056 , 'hedgeFunds' : 0 , 'individualInsiders' : 83863092 , 'institutions' : 457622262 , 'privateCompanies' : 12522 , 'publicCompanies' : 4718 , 'stateOrGovernment' : 250254 , 'symbol' : 'GOOG' }] shares_float \u00b6 Details Description : Retrieves details of floating shares Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . shares_float () Data [{ 'date' : '2021-08-12' , 'floatShares' : 580510157.0 , 'freeFloat' : 179.4023601582298 , 'outstandingShares' : 323580000.0 , 'source' : 'https://www.sec.gov/ix?doc=/Archives/edgar/data/1652044/000165204421000047/goog-20210630.htm' , 'symbol' : 'GOOG' }] key_executives \u00b6 Details Description : Retrieves details of key company execs Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . key_executives () Data [{ 'date' : '2021-08-12' , 'floatShares' : 580510157.0 , 'freeFloat' : 179.4023601582298 , 'outstandingShares' : 323580000.0 , 'source' : 'https://www.sec.gov/ix?doc=/Archives/edgar/data/1652044/000165204421000047/goog-20210630.htm' , 'symbol' : 'GOOG' }]","title":"Insights"},{"location":"guide/ticker/insights/#profile","text":"Details Description : Retrieves company profile Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . profile () Data [{ 'address' : '1600 Amphitheatre Parkway' , 'beta' : 1.017391 , 'ceo' : 'Mr. Sundar Pichai' , 'changes' : - 8.14 , 'cik' : '0001652044' , 'city' : 'Mountain View' , 'companyName' : 'Alphabet Inc.' , 'country' : 'US' , 'currency' : 'USD' , 'cusip' : '02079K107' , 'dcf' : 2773.8 , 'dcfDiff' : 376.88 , 'defaultImage' : False , 'description' : 'Alphabet Inc. provides online advertising services in the ' 'United States, Europe, the Middle East, Africa, the ' 'Asia-Pacific, Canada, and Latin America. It offers ' 'performance and brand advertising services. The company ' 'operates through Google and Other Bets segments. The Google ' 'segment offers products, such as Ads, Android, Chrome, Google ' 'Cloud, Google Maps, Google Play, Hardware, Search, and ' 'YouTube, as well as technical infrastructure. It also offers ' 'digital content, cloud services, hardware devices, and other ' 'miscellaneous products and services. The Other Bets segment ' 'includes businesses, including Access, Calico, CapitalG, GV, ' 'Verily, Waymo, and X, as well as Internet and television ' 'services. The company has an agreement with Sabre Corporation ' 'to develop an artificial intelligence-driven technology ' 'platform for travel. Alphabet Inc. was founded in 1998 and is ' 'headquartered in Mountain View, California.' , 'exchange' : 'Nasdaq Global Select' , 'exchangeShortName' : 'NASDAQ' , 'fullTimeEmployees' : 139995 , 'industry' : 'Internet Content & Information' , 'ipoDate' : '2004-08-19' , 'isActivelyTrading' : True , 'isEtf' : False , 'isin' : 'US02079K1079' , 'lastDiv' : 0.0 , 'mktCap' : 1827191914496.0 , 'phone' : '650-253-0000' , 'price' : 2753.79 , 'range' : '1406.55-2800.22' , 'sector' : 'Communication Services' , 'state' : 'CA' , 'symbol' : 'GOOG' , 'volAvg' : 1136007 , 'website' : 'http://www.abc.xyz' , 'zip' : '94043' }]","title":"profile"},{"location":"guide/ticker/insights/#analyst_estimates","text":"Details Description : Retrieves analyst estimates for key financial metrics Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . analyst_estimates () Data [{ 'date' : '2021-12-31' , 'estimatedEbitAvg' : 39863199675 , 'estimatedEbitHigh' : 40836481702 , 'estimatedEbitLow' : 39437150662 , 'estimatedEbitdaAvg' : 59980542854 , 'estimatedEbitdaHigh' : 61445000921 , 'estimatedEbitdaLow' : 59339484152 , 'estimatedEpsAvg' : 63.9336 , 'estimatedEpsHigh' : 75.705 , 'estimatedEpsLow' : 52.9788 , 'estimatedNetIncomeAvg' : 39993627601 , 'estimatedNetIncomeHigh' : 40970094098 , 'estimatedNetIncomeLow' : 39566184604 , 'estimatedRevenueAvg' : 224762614999 , 'estimatedRevenueHigh' : 234949860000 , 'estimatedRevenueLow' : 206864140000 , 'estimatedSgaExpenseAvg' : 32624449735 , 'estimatedSgaExpenseHigh' : 33420993686 , 'estimatedSgaExpenseLow' : 32275766872 , 'numberAnalystEstimatedRevenue' : 35 , 'numberAnalystsEstimatedEps' : 40 , 'symbol' : 'GOOG' }, ...","title":"analyst_estimates"},{"location":"guide/ticker/insights/#insider_transactions","text":"Details Description : Retrieves details of insider buying/selling Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . insider_transactions () from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) # Only returns the last 6 months of insider transactions goog . insider_transactions ( months = 6 ) Data [{ 'currency' : 'USD' , 'date' : '2021-08-11' , 'orderType' : 'Sell' , 'reportedName' : 'Sergey Brin' , 'sharePrice' : 2749.28 , 'shareVolume' : 27739 , 'symbol' : 'GOOG' , 'transactionValue' : 76262884 }, { 'currency' : 'USD' , 'date' : '2021-08-10' , 'orderType' : 'Sell' , 'reportedName' : 'Sergey Brin' , 'sharePrice' : 2748.97 , 'shareVolume' : 27787 , 'symbol' : 'GOOG' , 'transactionValue' : 76384923 }, { 'currency' : 'USD' , 'date' : '2021-08-09' , 'orderType' : 'Sell' , 'reportedName' : 'L. John Hennessy' , 'sharePrice' : 2741.42 , 'shareVolume' : 199 , 'symbol' : 'GOOG' , 'transactionValue' : 546239 }, { 'currency' : 'USD' , 'date' : '2021-08-09' , 'orderType' : 'Sell' , 'reportedName' : 'Sergey Brin' , 'sharePrice' : 2736.64 , 'shareVolume' : 27777 , 'symbol' : 'GOOG' , 'transactionValue' : 76016535 }, { 'currency' : 'USD' , 'date' : '2021-08-04' , 'orderType' : 'Sell' , 'reportedName' : 'Sundar Pichai' , 'sharePrice' : 2718.18 , 'shareVolume' : 3000 , 'symbol' : 'GOOG' , 'transactionValue' : 8153625 }, ...","title":"insider_transactions"},{"location":"guide/ticker/insights/#insider_transactions_summarized","text":"Details Description : Retrieves details of summarized insider buying/selling Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . insider_transactions_summarized () from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) # Only summarizes the last 6 months of insider transactions goog . insider_transactions_summarized ( months = 6 ) Data [{ 'buyOrders' : 0 , 'buyValue' : 0 , 'buyVolume' : 0 , 'currency' : 'USD' , 'sellOrders' : 117 , 'sellValue' : 1815554556 , 'sellVolume' : 817229 , 'symbol' : 'GOOG' }]","title":"insider_transactions_summarized"},{"location":"guide/ticker/insights/#share_ownership","text":"Details Description : Retrieves details of various shareholding groups Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . share_ownership () Data [{ 'employeeShareScheme' : 0 , 'firmsVCPE' : 0 , 'generalPublic' : 125002056 , 'hedgeFunds' : 0 , 'individualInsiders' : 83863092 , 'institutions' : 457622262 , 'privateCompanies' : 12522 , 'publicCompanies' : 4718 , 'stateOrGovernment' : 250254 , 'symbol' : 'GOOG' }]","title":"share_ownership"},{"location":"guide/ticker/insights/#shares_float","text":"Details Description : Retrieves details of floating shares Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . shares_float () Data [{ 'date' : '2021-08-12' , 'floatShares' : 580510157.0 , 'freeFloat' : 179.4023601582298 , 'outstandingShares' : 323580000.0 , 'source' : 'https://www.sec.gov/ix?doc=/Archives/edgar/data/1652044/000165204421000047/goog-20210630.htm' , 'symbol' : 'GOOG' }]","title":"shares_float"},{"location":"guide/ticker/insights/#key_executives","text":"Details Description : Retrieves details of key company execs Return : List[Dict] Example from quantel import Quantel qt = Quantel ( api_key = \"<your-quantel-api-key>\" ) goog = qt . ticker ( 'goog' ) goog . key_executives () Data [{ 'date' : '2021-08-12' , 'floatShares' : 580510157.0 , 'freeFloat' : 179.4023601582298 , 'outstandingShares' : 323580000.0 , 'source' : 'https://www.sec.gov/ix?doc=/Archives/edgar/data/1652044/000165204421000047/goog-20210630.htm' , 'symbol' : 'GOOG' }]","title":"key_executives"},{"location":"reference/quantel-reference/","text":"Quantel \u00b6 Quantel \u00b6 __init__ ( self , api_key , validate = True ) special \u00b6 Authenticate with the Quantel Finance API Parameters: Name Type Description Default api_key str Quantel Finance API Key required validate bool Validate API Key True Examples: >>> from quantel import Quantel >>> >>> qt = Quantel ( api_key = \"<quantel-api-key>\" ) Source code in quantel\\__init__.py def __init__ ( self , api_key : str , validate : bool = True ): \"\"\" Authenticate with the Quantel Finance API Args: api_key: Quantel Finance API Key validate: Validate API Key Example: >>> from quantel import Quantel >>> >>> qt = Quantel(api_key=\"<quantel-api-key>\") \"\"\" self . api_key = api_key self . host = \"https://quantel-io.p.rapidapi.com/\" if validate : self . _validate_api () ticker ( self , symbols , asynchronous = False ) \u00b6 Parameters: Name Type Description Default symbols Union[list, str] List of tickers, or space separated string required asynchronous bool Enable asynchronous lookup of tickers False Examples: >>> qt . ticker ( \"GOOG\" ) Returns: Type Description _Ticker Ticker class Source code in quantel\\__init__.py def ticker ( self , symbols : Union [ list , str ], asynchronous : bool = False ) -> _Ticker : \"\"\" Args: symbols: List of tickers, or space separated string asynchronous: Enable asynchronous lookup of tickers Example: >>> qt.ticker(\"GOOG\") Returns: Ticker class \"\"\" return _Ticker ( symbols , self . host , self . api_key , asynchronous )","title":"Reference"},{"location":"reference/quantel-reference/#quantel","text":"","title":"Quantel"},{"location":"reference/quantel-reference/#quantel.__init__.Quantel","text":"","title":"Quantel"},{"location":"reference/quantel-reference/#quantel.__init__.Quantel.__init__","text":"Authenticate with the Quantel Finance API Parameters: Name Type Description Default api_key str Quantel Finance API Key required validate bool Validate API Key True Examples: >>> from quantel import Quantel >>> >>> qt = Quantel ( api_key = \"<quantel-api-key>\" ) Source code in quantel\\__init__.py def __init__ ( self , api_key : str , validate : bool = True ): \"\"\" Authenticate with the Quantel Finance API Args: api_key: Quantel Finance API Key validate: Validate API Key Example: >>> from quantel import Quantel >>> >>> qt = Quantel(api_key=\"<quantel-api-key>\") \"\"\" self . api_key = api_key self . host = \"https://quantel-io.p.rapidapi.com/\" if validate : self . _validate_api ()","title":"__init__()"},{"location":"reference/quantel-reference/#quantel.__init__.Quantel.ticker","text":"Parameters: Name Type Description Default symbols Union[list, str] List of tickers, or space separated string required asynchronous bool Enable asynchronous lookup of tickers False Examples: >>> qt . ticker ( \"GOOG\" ) Returns: Type Description _Ticker Ticker class Source code in quantel\\__init__.py def ticker ( self , symbols : Union [ list , str ], asynchronous : bool = False ) -> _Ticker : \"\"\" Args: symbols: List of tickers, or space separated string asynchronous: Enable asynchronous lookup of tickers Example: >>> qt.ticker(\"GOOG\") Returns: Ticker class \"\"\" return _Ticker ( symbols , self . host , self . api_key , asynchronous )","title":"ticker()"}]}